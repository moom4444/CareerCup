/*
利用进栈和出栈完成
*/

package String;

import java.util.Stack;

public class Compression {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str = "abbccddaaa";
		System.out.println(solution(str));
	}
	
	
	public static String solution(String str)
	{
		Stack<Character> stack = new Stack();
		int count=0;
		String out = "";
		for(int i=0;i<str.length();i++)
		{
			char a = str.charAt(i);
			//if the stack is empty  psuh the first into stack
			if(stack.isEmpty()) 
				{
					count++;
					stack.push(a);
				}
			else {
				//otherwise compare the top with the new char
				char top = stack.pop();				
				if(top == a){
					//如果相等就把2个都推入栈中，个数＋1
					stack.push(top);
					stack.push(a);
					count++;
				}else{//如果不相等就输出 把count重置为0
					out +=top;
					out += count+"";
					stack.push(a);
					count =1;
				}
			}
			
		}

		char top = stack.pop();
		out += top;
		out += count+"";
		if(out.length()<=str.length())
		return out;
		return str;
	}

}


/*
 * Implement a method to perform basic string compression using the counts
of repeated characters. For example, the string aabcccccaaa would become
a2blc5a3. If the "compressed" string would not become smaller than the original
string, your method should return the original string
 
 * Algorithm :
 * Brute force 
 * go through the String  to  count the repeat sequence and   put   char+count to new string
 * compare the length of new string and  original string to decide which one  is returned 
 *
 *O(n) and O(n)
 * after read the book  solution find  this 
 * because string concatenation operates in 0(n^2)
 * so it is o(n^2)
 *
 */
public class CompressString_1_5 {
 
	public static void main(String[] args) {
		String  originalStr="aabcccccaaa";
		String compressedStr = compressStr(originalStr);
		if(compressedStr!=null)
			System.out.println(compressedStr);
 
	}
 
	private static String compressStr(String originalStr) {
		if(originalStr==null || originalStr.length()==0)
			return  originalStr;
		String resultSt="";
		char curchar=originalStr.charAt(0);
		int count =1;
		for(int i=1;i<originalStr.length();i++){
			if(originalStr.charAt(i)== curchar){
				count++;
			}
			else{
				resultSt+=curchar+""+count;
				curchar=originalStr.charAt(i);
				count =1;
			}
		}
		resultSt+=curchar+""+count;
		if(resultSt.length()<=originalStr.length())
			return resultSt;
		return originalStr;
		
	}
 
}
