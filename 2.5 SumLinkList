	/*
	
	2.5 You have two numbers represented by a linked list, where each node contains a
single digit. The digits are stored in reverse order, such that the Ts digit is at the
head of the list. Write a function that adds the two numbers and returns the sum
as a linked list.
EXAMPLE
Input: (7-> 1 -> 6) + (5 -> 9 -> 2).That is, 617 + 295.
Output: 2 -> 1 -> 9.That is, 912.
FOLLOW UP
Suppose the digits are stored in forward order. Repeat the above problem.
EXAMPLE
Input: (6 -> 1 -> 7) + (2 -> 9 -> 5).That is, 617 + 295.
Output: 9 -> 1 -> 2.That is, 912
*/
	
	public static node solution(node root1,node root2)
	{
		if(root1==null || root2 ==null)
		{
			return null;
		}
		
		node first = new node();
		node cur1 = root1;
		node cur2 = root2;
		node cur3 = null;
		int carry=0;
		while(cur1!=null&&cur2!=null)
		{
			int num1,num2,sum;
			num1 = cur1.data;
			num2 = cur2.data;
			
			//对于2个数子相加是否大于10，如大于就取个位数字，标志位＋1
			if(carry==0)
			{
				sum = num1+num2;
			}else{
				sum=num1+num2+1;
			}
			
			if(sum>10)
			{
				sum-=10;
				carry =1;
			}else carry =0;
			
			if(cur3==null) {
				cur3 = first;
				first.data = sum;
			}else{
				node newnode = new node(sum);
				cur3.next = newnode;
				cur3 = cur3.next;
			}
			cur1 = cur1.next;
			cur2 = cur2.next;
		}
		
		//if the cur2 len larger than the cur1, we continue to do linklist
		if(cur1==null)
		{
			int sum=0;
			while(cur2!=null)
			{
				node newnode = new node();
				if(carry==0){
					sum = cur2.data;
				}else{
					sum = cur2.data +1;
				}
				if(sum>=10){
					sum-=10;
					carry =1;
				}else{
					carry=0;
				}
				cur3.next = newnode;
				newnode.data = sum;
				cur2 = cur2.next;
			}
		}
		
		if(cur2==null)
		{
			while(cur1!=null)
			{	int sum=0;
				node newnode = new node();
				if(carry==0){
					sum = cur1.data;
				}else{
					sum = cur1.data +1;
				}
				if(sum>=10){
					sum-=10;
					carry =1;
				}else{
					carry=0;
				}
				cur3.next = newnode;
				newnode.data = sum;
				cur1 = cur1.next;
			}
		}
		/*
		如果最后的2个数字相加仍然是大于10的，那我们就在新的linklist中插入一个新节点
		然后这个节点的数据就是carry
		*/
		if(carry == 1)
		{
			node last = new node(1);
			cur3.next = last;
			
		}
		
		return first;
	}
}
